package com.example.proxyservice.config;

import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.client5.http.impl.auth.AuthCache;
import org.apache.hc.client5.http.impl.auth.BasicAuthCache;
import org.apache.hc.client5.http.impl.auth.SPNegoScheme;
import org.apache.hc.client5.http.impl.auth.SPNegoSchemeFactory;
import org.apache.hc.client5.http.protocol.HttpClientContext;
import org.apache.hc.core5.http.protocol.HttpContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class KerberosConfig {

    @Bean
    public CloseableHttpClient httpClient() {
        return HttpClients.custom()
                .setDefaultAuthSchemeRegistry(registry -> registry.register("Negotiate", new SPNegoSchemeFactory(true)))
                .build();
    }

    @Bean
    public HttpClientContext httpClientContext() {
        AuthCache authCache = new BasicAuthCache();
        authCache.put(null, new SPNegoScheme());
        HttpClientContext context = HttpClientContext.create();
        context.setAuthCache(authCache);
        return context;
    }
}

package com.example.proxyservice.controller;

import org.apache.hc.client5.http.classic.methods.*;
import org.apache.hc.client5.http.entity.EntityBuilder;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.protocol.HttpClientContext;
import org.apache.hc.core5.http.HttpResponse;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.HttpClientErrorException;

import javax.servlet.http.HttpServletRequest;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Enumeration;
import java.util.stream.Collectors;

@RestController
public class ProxyController {

    @Value("${idm.url}")
    private String idmUrl;

    private final CloseableHttpClient httpClient;
    private final HttpClientContext httpClientContext;

    public ProxyController(CloseableHttpClient httpClient, HttpClientContext httpClientContext) {
        this.httpClient = httpClient;
        this.httpClientContext = httpClientContext;
    }

    @RequestMapping(value = "/**", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE})
    public ResponseEntity<?> proxyRequest(HttpServletRequest request, @RequestBody(required = false) String body) {
        try {
            // Создаем URL для перенаправления
            String path = request.getRequestURI();
            String queryString = request.getQueryString();
            String url = idmUrl + path + (queryString != null ? "?" + queryString : "");

            // Определяем HTTP-метод
            HttpUriRequestBase httpRequest = createHttpRequest(request.getMethod(), url, body);

            // Устанавливаем заголовки
            Enumeration<String> headerNames = request.getHeaderNames();
            while (headerNames.hasMoreElements()) {
                String headerName = headerNames.nextElement();
                httpRequest.addHeader(headerName, request.getHeader(headerName));
            }

            // Отправляем запрос
            HttpResponse response = httpClient.execute(httpRequest, httpClientContext);

            // Читаем ответ
            String responseBody = new BufferedReader(new InputStreamReader(response.getEntity().getContent()))
                    .lines()
                    .collect(Collectors.joining("\n"));

            return ResponseEntity.status(response.getCode()).body(responseBody);

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Ошибка при обработке запроса: " + e.getMessage());
        }
    }

    private HttpUriRequestBase createHttpRequest(String method, String url, String body) {
        HttpUriRequestBase request;
        switch (method.toUpperCase()) {
            case "POST":
                request = new HttpPost(url);
                ((HttpPost) request).setEntity(new StringEntity(body, "UTF-8"));
                break;
            case "PUT":
                request = new HttpPut(url);
                ((HttpPut) request).setEntity(new StringEntity(body, "UTF-8"));
                break;
            case "DELETE":
                request = new HttpDelete(url);
                break;
            default:
                request = new HttpGet(url);
        }
        return request;
    }
}

